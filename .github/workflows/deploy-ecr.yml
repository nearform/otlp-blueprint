name: Deploy dev images to ECR

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:

  build:

    name: Build Images
    runs-on: ubuntu-latest

    steps:

      - name: Check out code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::101259067028:role/dev-otlp-github-actions-role
          role-session-name: github-action-session-otlp
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push backend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dev-otlp-be-img-repo
          IMAGE_TAG: latest
        run: |
          docker build --platform=linux/amd64 --build-arg APP_VERSION=${{ vars.APP_VERSION }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Backend.dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push frontend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dev-otlp-fe-img-repo
          IMAGE_TAG: latest
        run: |
          docker build --platform=linux/amd64 --build-arg API_URL=${{ vars.API_URL }} --build-arg OTLP_COLLECTOR_URL=${{ vars.OTLP_COLLECTOR_URL }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Frontend.dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push collector image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dev-otlp-collector-img-repo
          IMAGE_TAG: latest
        run: |
          docker build --platform=linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Collector.dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
